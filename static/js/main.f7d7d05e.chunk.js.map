{"version":3,"sources":["components/Header.js","components/Search.js","utils/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","styles","search","margin","Search","props","style","onChange","handleInputChange","value","name","type","placeholder","id","query","axios","get","table","Table","state","result","originalResult","searchTable","API","then","res","setState","data","results","catch","err","console","log","event","target","newResult","length","filter","employee","first","toLowerCase","includes","last","email","cell","moment","dob","date","format","handleFormSubmit","colName","sort","a","b","localeCompare","this","scope","onClick","map","index","key","src","picture","thumbnail","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8WAWeA,MARf,WACE,OACE,4BAAQC,UAAU,UAChB,kDACA,yHCJAC,G,MAAS,CACbC,OAAQ,CACNC,OAAQ,MAsBGC,MAlBf,SAAgBC,GACd,OACE,8BACE,yBAAKC,MAAOL,EAAOC,OAAQF,UAAU,cACnC,2BACEO,SAAUF,EAAMG,kBAChBC,MAAOJ,EAAMI,MACbC,KAAK,SACLC,KAAK,OACLX,UAAU,eACVY,YAAY,SACZC,GAAG,c,iBChBE,EACL,SAASC,GACf,OAAOC,IAAMC,IALD,gDAKeF,EAJhB,gC,gBCKTb,G,MAAS,CACbgB,MAAO,CACLd,OAAQ,MA8FGe,E,4MA1FbC,MAAQ,CAAEC,OAAQ,GAAIC,eAAgB,GAAInB,OAAQ,I,EAOlDoB,YAAc,SAAAR,GACZS,EAAWT,GACRU,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEN,OAAQK,EAAIE,KAAKC,QAASP,eAAgBI,EAAIE,KAAKC,aAEpEC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG9BtB,kBAAoB,SAAAyB,GAClB,IAAMxB,EAAQwB,EAAMC,OAAOzB,MACrBC,EAAOuB,EAAMC,OAAOxB,KAC1B,EAAKgB,SAAL,eACGhB,EAAOD,IAGV,IAAM0B,EAAY,EAAKhB,MAAME,eAAee,OAAS,EAAI,EAAKjB,MAAME,eAAegB,QAAO,SAAAC,GAExF,OADAP,QAAQC,IAAIM,GACLA,EAAS5B,KAAK6B,MAAMC,cAAcC,SAAShC,EAAM+B,gBACvDF,EAAS5B,KAAKgC,KAAKF,cAAcC,SAAShC,EAAM+B,gBAC/CF,EAASK,MAAMH,cAAcC,SAAShC,EAAM+B,gBAAkBF,EAASM,KAAKH,SAAShC,IAAUoC,IAAOP,EAASQ,IAAIC,MAAMC,OAAO,cAAcP,SAAShC,MACtJ,GACL,EAAKiB,SAAS,CAAEN,OAAQe,K,EAG1Bc,iBAAmB,SAAAC,GACjB,IAAIf,EAAY,KAEA,UAAZe,EACFf,EAAY,EAAKhB,MAAMC,OAAOgB,OAAS,EAAI,EAAKjB,MAAMC,OAAO+B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1C,KAAK6B,MAAMe,cAAcD,EAAE3C,KAAK6B,UAC5G,GAEiB,UAAZW,EACPf,EAAY,EAAKhB,MAAMC,OAAOgB,OAAS,EAAI,EAAKjB,MAAMC,OAAO+B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAET,MAAMW,cAAcD,EAAEV,UAClG,GAEiB,QAAZO,IACPf,EAAY,EAAKhB,MAAMC,OAAOgB,OAAS,EAAI,EAAKjB,MAAMC,OAAO+B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEN,IAAIC,KAAKO,cAAcD,EAAEP,IAAIC,SACzG,IAEJ,EAAKrB,SAAS,CAAEN,OAAQe,K,kEA1CxBoB,KAAKjC,YAAY,M,+BA6CT,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEb,MAAO8C,KAAKpC,MAAMjB,OAClBM,kBAAmB+C,KAAK/C,kBACxByC,iBAAkBM,KAAKN,mBAEzB,2BAAO3C,MAAOL,EAAOgB,MAAOjB,UAAU,0BACpC,2BAAOA,UAAU,cACf,4BAEE,wBAAIwD,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMC,QAAS,WAAQ,EAAKR,iBAAiB,WAAvD,QACA,wBAAIO,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMC,QAAS,WAAQ,EAAKR,iBAAiB,WAAvD,SACA,wBAAIO,MAAM,MAAMC,QAAS,WAAQ,EAAKR,iBAAiB,SAAvD,SAGJ,+BACGM,KAAKpC,MAAMC,OAAOgB,OAAS,EAC1BmB,KAAKpC,MAAMC,OAAOsC,KAAI,SAACpB,EAAUqB,GAC/B,OAAQ,wBAAIC,IAAKD,GACf,4BAAI,yBAAKE,IAAKvB,EAASwB,QAAQC,UAAWC,IAAI,cAC9C,4BAAK1B,EAAS5B,KAAK6B,MAAQ,IAAMD,EAAS5B,KAAKgC,MAC/C,4BAAKJ,EAASM,MACd,4BAAKN,EAASK,OACd,4BAAKE,IAAOP,EAASQ,IAAIC,MAAMC,OAAO,mBAG1C,U,GAjFMiB,IAAMC,W,MCAXC,MARf,WACE,OACE,yBAAKnE,UAAU,OACb,kBAAC,EAAD,QCKcoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdrD,OAAM,SAAAsD,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.f7d7d05e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Employee Directory</h1>\r\n      <p>You can search for your employee or sort them by name, phone email address, or birthday.</p>\r\n    </header>\r\n  );\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../styles/search.css\";\r\n\r\nconst styles = {\r\n  search: {\r\n    margin: 30,\r\n  }\r\n}\r\n\r\nfunction Search(props) {\r\n  return (\r\n    <form>\r\n      <div style={styles.search} className=\"form-group\">\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n\r\n","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\nconst APIKEY = \"&apikey=6WTW-8POB-DZOK-LW3Q\";\r\n\r\nexport default {\r\n  search: function(query) {\r\n    return axios.get(BASEURL + query + APIKEY);\r\n  }\r\n};","import React from \"react\";\r\nimport Header from './Header';\r\nimport Search from './Search';\r\nimport API from \"../utils/API\";\r\nimport moment from \"moment\"\r\nimport \"../styles/table.css\";\r\n\r\nconst styles = {\r\n  table: {\r\n    margin: 30\r\n  }\r\n}\r\nclass Table extends React.Component {\r\n  state = { result: [], originalResult: [], search: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.searchTable(\"\");\r\n  }\r\n\r\n  searchTable = query => {\r\n    API.search(query)\r\n      .then(res => {\r\n        this.setState({ result: res.data.results, originalResult: res.data.results })\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n\r\n    const newResult = this.state.originalResult.length > 0 ? this.state.originalResult.filter(employee => {\r\n      console.log(employee)\r\n      return employee.name.first.toLowerCase().includes(value.toLowerCase()) ||\r\n       employee.name.last.toLowerCase().includes(value.toLowerCase()) ||\r\n        employee.email.toLowerCase().includes(value.toLowerCase()) || employee.cell.includes(value) || moment(employee.dob.date).format(\"MM/DD/YYYY\").includes(value)\r\n    }) : []\r\n    this.setState({ result: newResult })\r\n  };\r\n\r\n  handleFormSubmit = colName => {\r\n    let newResult = null\r\n\r\n    if (colName === \"first\") {\r\n      newResult = this.state.result.length > 0 ? this.state.result.sort((a, b) => a.name.first.localeCompare(b.name.first)) :\r\n        []\r\n    }\r\n    else if (colName === \"email\") {\r\n      newResult = this.state.result.length > 0 ? this.state.result.sort((a, b) => a.email.localeCompare(b.email)) :\r\n        []\r\n    }\r\n    else if (colName === \"dob\") {\r\n      newResult = this.state.result.length > 0 ? this.state.result.sort((a, b) => a.dob.date.localeCompare(b.dob.date)) :\r\n        []\r\n    }\r\n    this.setState({ result: newResult })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <Search\r\n          value={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n        />\r\n        <table style={styles.table} className=\"table table-responsive\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              {/* where sortung comes into play */}\r\n              <th scope=\"col\">image</th>\r\n              <th scope=\"col\" onClick={() => { this.handleFormSubmit(\"first\") }}>Name</th>\r\n              <th scope=\"col\">Phone</th>\r\n              <th scope=\"col\" onClick={() => { this.handleFormSubmit(\"email\") }}>Email</th>\r\n              <th scope=\"col\" onClick={() => { this.handleFormSubmit(\"dob\") }}>DOB</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.result.length > 0 ?\r\n              this.state.result.map((employee, index) => {\r\n                return (<tr key={index}>\r\n                  <td><img src={employee.picture.thumbnail} alt=\"employee\" /></td>\r\n                  <td>{employee.name.first + \" \" + employee.name.last}</td>\r\n                  <td>{employee.cell}</td>\r\n                  <td>{employee.email}</td>\r\n                  <td>{moment(employee.dob.date).format(\"MM/DD/YYYY\")}</td>\r\n                </tr>)\r\n              }) :\r\n              \"\"\r\n            }\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n// exporting table to be used in other parts of the application\r\nexport default Table;\r\n\r\n","import React from 'react';\r\nimport Table from './components/Table'\r\nimport './styles/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Table/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}